Problem Description
Write a program to find the node at which the intersection of two singly linked lists, A and B, begins. For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗
B:     b1 → b2 → b3


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
	public ListNode getIntersectionNode(ListNode A, ListNode B) {
        
        int lenA = size(A);
        int lenB = size(B);
        
        int absDiff = Math.abs(lenA-lenB);

        if(lenA > lenB){
            for(int i=0;i<absDiff;i++){
                A = A.next;
            }
        }else{
            for(int i=0;i<absDiff;i++){
                B = B.next;
            }
        }
        
        while(A != B){
            A = A.next;
            B = B.next;
        }
        return A;
	}

    public int size(ListNode head){
        int count = 0;
        ListNode tmp = head;
        while(tmp != null){
            count ++;
            tmp = tmp.next;
        }
        return count;
    }

}



2. Copy List
Problem Description
You are given a linked list A
Each node in the linked list contains two pointers: a next pointer and a random pointer
The next pointer points to the next node in the list
The random pointer can point to any node in the list, or it can be NULL
Your task is to create a deep copy of the linked list A
The copied list should be a completely separate linked list from the original list, but with the same node values and random pointer connections as the original list
You should create a new linked list B, where each node in B has the same value as the corresponding node in A
The next and random pointers of each node in B should point to the corresponding nodes in B (rather than A)


/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null) return null;

        RandomListNode tmp = head;
        while(tmp != null){  // travel through node create a copy and set pointer
            RandomListNode nn = new RandomListNode(tmp.label);
            nn.next = tmp.next;
            tmp.next = nn;
            tmp = tmp.next.next;
        }

        RandomListNode tmp1 = head;
        while(tmp1 != null){ // travel and set RandomListNode to the copy node
            if(tmp1.random != null){
                tmp1.next.random = tmp1.random.next;
            }
            tmp1=tmp1.next.next;
        }

        RandomListNode res = new RandomListNode(-1);
        RandomListNode tmp2 = head;
        RandomListNode tmp3 = res;
        while(tmp2 != null){
            tmp3.next = tmp2.next;
            tmp3 = tmp3.next;

            tmp2.next=tmp2.next.next;
            tmp2 = tmp2.next;

        }

        return res.next;

    }

}
