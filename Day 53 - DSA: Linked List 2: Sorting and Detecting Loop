Given a linked list of integers, find and return the middle element of the linked list.
NOTE: If there are N nodes in the linked list and N is even then return the (N/2 + 1)th element.

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public int solve(ListNode A) {

        ListNode slow = A;
        ListNode fast = A;

        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow.val;
    }
}


Merge two sorted linked lists, A and B, and return it as a new list.
The new list should be made by splicing together the nodes of the first two lists and should also be sorted.

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode A, ListNode B) {
        if(A == null) return B;
        if(B == null) return A;
        ListNode head = null;
        ListNode tmp = null;
        if(A.val < B.val){
            head = A;
            tmp = A;
            A = A.next;
        }else{
            head = B;
            tmp = B;
            B = B.next;
        }

        while(A != null && B != null){
            if(A.val < B.val){
                tmp.next = A;
                tmp = tmp.next;
                A = A.next;
            }else{
                tmp.next = B;
                tmp = tmp.next;
                B = B.next;
            }
        }
        if(A == null){
            tmp.next = B;
        }
        if(B == null){
            tmp.next = A;
        }

    return head;
    }
}
